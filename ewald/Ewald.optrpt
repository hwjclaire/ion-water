
Begin optimization report for: Ewald::Ewald(Ewald *, Cell &, int, std::vector<D3vector *, std::allocator<D3vector *>> *, std::vector<double *, std::allocator<double *>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> &, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(56,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Ewald.C(57,5)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Ewald.C(58,7)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(73,19)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(74,18)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(75,18)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at Ewald.C(77,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::_M_fill_insert(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::iterator, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::size_type, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(455,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(472,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/vector.tcc(477,6)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(495,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(502,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(518,8)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_15207 line 160 and  line 110
   remark #15346: vector dependence: assumed FLOW dependence between  line 110 and __first_15207 line 160
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer>(std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer, std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first line 160 and  line 110
   remark #15346: vector dependence: assumed FLOW dependence between  line 110 and __first line 160
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::~vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8/bits/stl_vector.h(416,9)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_15207 line 160 and  line 110
   remark #15346: vector dependence: assumed FLOW dependence between  line 110 and __first_15207 line 160
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::complex<double>, std::allocator<std::complex<double>>>::_M_fill_insert(std::vector<std::complex<double>, std::allocator<std::complex<double>>> *, std::vector<std::complex<double>, std::allocator<std::complex<double>>>::iterator, std::vector<std::complex<double>, std::allocator<std::complex<double>>>::size_type, const std::vector<std::complex<double>, std::allocator<std::complex<double>>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(455,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_14218 line 83 and __first_14218 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.14218 line 83 and __cur.14218 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(455,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_value line 537 and _M_value line 537
   remark #15346: vector dependence: assumed ANTI dependence between _M_value line 537 and _M_value line 537
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
   remark #15389: vectorization support: reference __cur.14367 has unaligned access   [ /usr/include/c++/4.8/bits/stl_construct.h(83,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 108.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(472,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_14218 line 83 and __first_14218 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.14218 line 83 and __cur.14218 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(472,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
   remark #15389: vectorization support: reference __cur.14367 has unaligned access   [ /usr/include/c++/4.8/bits/stl_construct.h(83,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 108.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(495,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_14218 line 83 and __first_14218 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.14218 line 83 and __cur.14218 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(495,9)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(502,9)
   remark #15389: vectorization support: reference __cur.14218 has unaligned access   [ /usr/include/c++/4.8/bits/stl_construct.h(83,42) ]
   remark #15389: vectorization support: reference __first_14218 has unaligned access   [ /usr/include/c++/4.8/bits/stl_construct.h(83,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 88.000 
   remark #15478: estimated potential speedup: 0.520 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 4 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(502,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_fill_insert(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::iterator, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
   remark #15388: vectorization support: reference __first_13325 has aligned access   [ /usr/include/c++/4.8/bits/stl_algobase.h(693,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
   remark #15388: vectorization support: reference __first_13389 has aligned access   [ /usr/include/c++/4.8/bits/stl_algobase.h(751,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
   remark #15388: vectorization support: reference __first_13325 has aligned access   [ /usr/include/c++/4.8/bits/stl_algobase.h(693,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
   remark #15388: vectorization support: reference __first_13389 has aligned access   [ /usr/include/c++/4.8/bits/stl_algobase.h(751,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::vector<D3vector, std::allocator<D3vector>>::_M_fill_insert(std::vector<D3vector, std::allocator<D3vector>> *, std::vector<D3vector, std::allocator<D3vector>>::iterator, std::vector<D3vector, std::allocator<D3vector>>::size_type, const std::vector<D3vector, std::allocator<D3vector>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(455,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_13725 line 83 and __first_13725 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.13725 line 83 and __cur.13725 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(455,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 10.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(536,4) inlined into /usr/include/c++/4.8/bits/vector.tcc(460,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 30.000 
   remark #15478: estimated potential speedup: 1.190 
   remark #15479: lightweight vector operations: 8 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(462,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 27 
   remark #15477: vector loop cost: 109.000 
   remark #15478: estimated potential speedup: 0.490 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(467,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(472,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_13725 line 83 and __first_13725 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.13725 line 83 and __cur.13725 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(472,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 30.000 
   remark #15478: estimated potential speedup: 1.190 
   remark #15479: lightweight vector operations: 8 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(681,7) inlined into /usr/include/c++/4.8/bits/vector.tcc(476,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 27 
   remark #15477: vector loop cost: 109.000 
   remark #15478: estimated potential speedup: 0.490 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(186,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(489,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(495,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_13725 line 83 and __first_13725 line 83
   remark #15346: vector dependence: assumed ANTI dependence between __cur.13725 line 83 and __cur.13725 line 83
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(495,9)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(502,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15452: unmasked strided loads: 3 
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 26 
   remark #15477: vector loop cost: 101.500 
   remark #15478: estimated potential speedup: 0.250 
   remark #15479: lightweight vector operations: 16 
   remark #15480: medium-overhead vector operations: 3 
   remark #15481: heavy-overhead vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.8/bits/vector.tcc(502,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: Ewald::Ewald(Ewald *const, Cell &, int, std::vector<D3vector *, std::allocator<D3vector *>> *, std::vector<double *, std::allocator<double *>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> &, int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(56,3) inlined into Ewald.C(10,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Ewald.C(57,5) inlined into Ewald.C(10,8)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Ewald.C(58,7) inlined into Ewald.C(10,8)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(10,8)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(10,8)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_construct.h(102,4) inlined into Ewald.C(10,8)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at Ewald.C(77,3) inlined into Ewald.C(10,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: Ewald::self(Ewald *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(296,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: Ewald::field(Ewald *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(92,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 95 and F64 line 97
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 97 and F64 line 95

   LOOP BEGIN at Ewald.C(93,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 95 and F64 line 97
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 97 and F64 line 95
   LOOP END
LOOP END

LOOP BEGIN at Ewald.C(296,3) inlined into Ewald.C(102,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at Ewald.C(105,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 108 and this line 108
   remark #15346: vector dependence: assumed ANTI dependence between this line 108 and F64 line 108

   LOOP BEGIN at Ewald.C(106,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F64 line 108 and this line 108
      remark #15346: vector dependence: assumed ANTI dependence between this line 108 and F64 line 108
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Ewald::shortrange(Ewald *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(132,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Ewald.C(133,7)
   <Peeled>
   LOOP END

   LOOP BEGIN at Ewald.C(133,7)
      remark #15388: vectorization support: reference eloc has aligned access   [ Ewald.C(134,9) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 1.380 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at Ewald.C(133,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at Ewald.C(168,11)
   remark #15388: vectorization support: reference t has aligned access   [ Ewald.C(168,42) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 2.250 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Ewald.C(168,11)
<Remainder>
LOOP END

LOOP BEGIN at Ewald.C(200,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Ewald.C(201,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between this line 202 and this line 202
      remark #15346: vector dependence: assumed ANTI dependence between this line 202 and this line 202
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at Ewald.C(137,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Ewald.C(142,7)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

      LOOP BEGIN at ../lib/Cell.h(94,5) inlined into Ewald.C(147,15)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

         LOOP BEGIN at ../lib/Cell.h(97,7) inlined into Ewald.C(147,15)
            remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
         LOOP END
      LOOP END

      LOOP BEGIN at ../lib/Cell.h(106,5) inlined into Ewald.C(147,15)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

         LOOP BEGIN at ../lib/Cell.h(109,7) inlined into Ewald.C(147,15)
            remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
         LOOP END
      LOOP END

      LOOP BEGIN at Ewald.C(152,9)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

         LOOP BEGIN at Ewald.C(153,9)
            remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

            LOOP BEGIN at Ewald.C(154,9)
               remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

               LOOP BEGIN at Ewald.C(170,11)
                  remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

                  LOOP BEGIN at Ewald.C(171,13)
                     remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Ewald::longrange(Ewald *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(251,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at Ewald.C(220,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this line 1250 and this line 1250
   remark #15346: vector dependence: assumed ANTI dependence between this line 1250 and this line 1250
LOOP END

LOOP BEGIN at Ewald.C(220,3)
<Remainder>
LOOP END

LOOP BEGIN at Ewald.C(245,5)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 15.000 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Ewald.C(282,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this line 283 and this line 283
   remark #15346: vector dependence: assumed ANTI dependence between this line 283 and this line 283
LOOP END


Non-optimizable loops:


LOOP BEGIN at Ewald.C(224,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Ewald.C(228,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

      LOOP BEGIN at Ewald.C(233,7)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

         LOOP BEGIN at Ewald.C(236,9)
            remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Ewald.C(260,7)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Ewald.C(268,9)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

      LOOP BEGIN at Ewald.C(275,11)
         remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector<int>(std::vector<double, std::allocator<double>> *, int, int, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/stl_vector.h(405,4)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/stl_vector.h(405,4)
   remark #15388: vectorization support: reference __first_13389 has aligned access   [ /usr/include/c++/4.8/bits/stl_algobase.h(751,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8/bits/stl_vector.h(405,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: Ewald::print(Ewald *, std::ostream &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Ewald.C(314,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Ewald.C(325,17)
      remark #15382: vectorization support: call to function std::operator<<<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, std::_Setw) cannot be vectorized   [ Ewald.C(327,9) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ Ewald.C(327,22) ]
      remark #15382: vectorization support: call to function std::operator<<<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, std::_Setw) cannot be vectorized   [ Ewald.C(328,9) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ Ewald.C(328,22) ]
      remark #15382: vectorization support: call to function std::operator<<<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, std::_Setw) cannot be vectorized   [ Ewald.C(329,9) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ Ewald.C(329,22) ]
      remark #15382: vectorization support: call to function std::operator<<<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, std::_Setw) cannot be vectorized   [ Ewald.C(330,9) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ Ewald.C(330,22) ]
      remark #15382: vectorization support: call to function std::operator<<<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, std::_Setw) cannot be vectorized   [ Ewald.C(331,9) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ Ewald.C(331,22) ]
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) cannot be vectorized   [ Ewald.C(331,45) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between __1STRUCTVAR.40 line 223 and __1STRUCTVAR.40 line 327
      remark #15346: vector dependence: assumed ANTI dependence between _M_n line 327 and _M_n line 223
   LOOP END
LOOP END
===========================================================================
