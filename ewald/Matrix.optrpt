
Begin optimization report for: operator<<(std::ostream &, const DoubleMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(926,3) inlined into Matrix.C(2942,5)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(928,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between val line 927 and val line 928
   remark #15346: vector dependence: assumed FLOW dependence between a_13070 line 928 and a_13070 line 927

   LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2942,5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2942,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2942,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(2898,9) inlined into Matrix.C(2942,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at Matrix.C(2888,3) inlined into Matrix.C(2942,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Matrix.C(2896,7) inlined into Matrix.C(2942,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: operator<<(std::ostream &, const ComplexMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.h(388,38) inlined into Matrix.C(2948,5)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.h(388,38) inlined into Matrix.C(2948,5)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(977,3) inlined into Matrix.C(2948,5)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(979,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between val line 978 and val line 979
   remark #15346: vector dependence: assumed FLOW dependence between a_13080 line 979 and a_13080 line 978

   LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2948,5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2948,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2948,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(2930,9) inlined into Matrix.C(2948,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at Matrix.C(2920,3) inlined into Matrix.C(2948,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Matrix.C(2928,7) inlined into Matrix.C(2948,5)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::print(const DoubleMatrix *, std::ostream &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(926,3) inlined into Matrix.C(2891,7)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(928,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between val line 927 and val line 928
   remark #15346: vector dependence: assumed FLOW dependence between a_13070 line 928 and a_13070 line 927

   LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2891,7)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2891,7)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(927,5) inlined into Matrix.C(2891,7)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(2898,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at Matrix.C(2888,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Matrix.C(2896,7)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::operator=(DoubleMatrix *, const DoubleMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1277,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::matgather(const DoubleMatrix *, double *, int) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2131,32)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at Matrix.C(2125,26)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Matrix.C(2127,28)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

      LOOP BEGIN at Matrix.C(2129,30)
         remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::symmetrize(DoubleMatrix *, char)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1030,5) inlined into Matrix.C(1107,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference val has aligned access   [ Matrix.C(1034,9) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 40 
      remark #15477: vector loop cost: 46.000 
      remark #15478: estimated potential speedup: 3.350 
      remark #15479: lightweight vector operations: 13 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15389: vectorization support: reference val has unaligned access   [ Matrix.C(1034,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1107,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1107,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_13094 line 1037 and this_13094 line 1037
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1107,5)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1030,5) inlined into Matrix.C(1114,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference val has aligned access   [ Matrix.C(1034,9) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 34.000 
      remark #15478: estimated potential speedup: 3.920 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15389: vectorization support: reference val has unaligned access   [ Matrix.C(1034,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1114,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1114,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_13094 line 1037 and this_13094 line 1037
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1114,5)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1030,5) inlined into Matrix.C(1121,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference val has aligned access   [ Matrix.C(1034,9) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 34.000 
      remark #15478: estimated potential speedup: 3.920 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15388: vectorization support: reference this_13094 has aligned access   [ Matrix.C(1033,9) ]
      remark #15389: vectorization support: reference val has unaligned access   [ Matrix.C(1034,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1121,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1121,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_13094 line 1037 and this_13094 line 1037
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1121,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::set(DoubleMatrix *, char, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(554,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Matrix.C(556,9)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Matrix.C(558,31)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at Matrix.C(560,33)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(572,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Matrix.C(574,9)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Matrix.C(576,32)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at Matrix.C(578,34)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(593,32)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Matrix.C(595,34)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Matrix.C(617,15)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between this line 623 and this line 623
         remark #15346: vector dependence: assumed FLOW dependence between this line 623 and this line 623
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::getsub(DoubleMatrix *, const DoubleMatrix &, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(926,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this line 928 and this line 928
   remark #15346: vector dependence: assumed ANTI dependence between this line 928 and this line 928

   LOOP BEGIN at Matrix.C(927,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between this line 928 and this line 928
      remark #15346: vector dependence: assumed ANTI dependence between this line 928 and this line 928
   LOOP END

   LOOP BEGIN at Matrix.C(927,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::getsub(DoubleMatrix *, const DoubleMatrix &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(952,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this line 954 and this line 954
   remark #15346: vector dependence: assumed ANTI dependence between this line 954 and this line 954

   LOOP BEGIN at Matrix.C(953,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between this line 954 and this line 954
      remark #15346: vector dependence: assumed ANTI dependence between this line 954 and this line 954
   LOOP END

   LOOP BEGIN at Matrix.C(953,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::transpose(DoubleMatrix *, double, const DoubleMatrix &, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1030,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Matrix.C(1031,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this line 1033 and this line 1034
      remark #15346: vector dependence: assumed FLOW dependence between this line 1034 and this line 1033
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1036,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::transpose(DoubleMatrix *, const DoubleMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1030,5) inlined into Matrix.C(1049,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Matrix.C(1031,7) inlined into Matrix.C(1049,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this line 1033 and this_13094 line 1034
      remark #15346: vector dependence: assumed FLOW dependence between this_13094 line 1034 and this line 1033
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1036,5) inlined into Matrix.C(1049,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::lu(DoubleMatrix *, std::valarray<int> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1776,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1776,10)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1776,10)
      remark #15388: vectorization support: reference __b_22765 has aligned access   [ /usr/include/c++/4.8/bits/valarray_array.h(122,5) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1776,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::inverse(DoubleMatrix *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1848,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1848,10)
      remark #15389: vectorization support: reference __b_22835 has unaligned access   [ /usr/include/c++/4.8/bits/valarray_array.h(122,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8/bits/valarray_array.h(121,2) inlined into Matrix.C(1848,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::syev(DoubleMatrix *, char, std::valarray<double> &, DoubleMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1277,5) inlined into Matrix.C(2308,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::syevd(DoubleMatrix *, char, std::valarray<double> &, DoubleMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1277,5) inlined into Matrix.C(2367,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::syevx(DoubleMatrix *, char, std::valarray<double> &, DoubleMatrix &, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1277,5) inlined into Matrix.C(2441,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::print(const ComplexMatrix *, std::ostream &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.h(388,38) inlined into Matrix.C(2916,28)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.h(388,38) inlined into Matrix.C(2916,28)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(977,3) inlined into Matrix.C(2923,7)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(979,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between val line 978 and val line 979
   remark #15346: vector dependence: assumed FLOW dependence between a_13080 line 979 and a_13080 line 978

   LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2923,7)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2923,7)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(978,5) inlined into Matrix.C(2923,7)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(2930,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at Matrix.C(2920,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at Matrix.C(2928,7)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::operator=(ComplexMatrix *, const ComplexMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1295,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::symmetrize(ComplexMatrix *, char)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1144,24)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1144,24)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1074,5) inlined into Matrix.C(1145,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160

   LOOP BEGIN at Matrix.C(1075,7) inlined into Matrix.C(1145,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1080,5) inlined into Matrix.C(1145,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed ANTI dependence between this_7821 line 160 and this_7821 line 160
LOOP END

LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1150,24)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1150,24)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1074,5) inlined into Matrix.C(1152,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160

   LOOP BEGIN at Matrix.C(1075,7) inlined into Matrix.C(1152,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1080,5) inlined into Matrix.C(1152,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed ANTI dependence between this_7821 line 160 and this_7821 line 160
LOOP END

LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1157,24)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.h(412,38) inlined into Matrix.C(1157,24)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1074,5) inlined into Matrix.C(1159,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160

   LOOP BEGIN at Matrix.C(1075,7) inlined into Matrix.C(1159,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1080,5) inlined into Matrix.C(1159,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed ANTI dependence between this_7821 line 160 and this_7821 line 160
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::set(ComplexMatrix *, char, std::complex<double>)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(650,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this line 659 and this line 659
   remark #15346: vector dependence: assumed OUTPUT dependence between this line 659 and this line 659

   LOOP BEGIN at Matrix.C(652,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this line 659 and this line 659
      remark #15346: vector dependence: assumed OUTPUT dependence between this line 659 and this line 659

      LOOP BEGIN at Matrix.C(654,31)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at Matrix.C(656,33)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(668,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this line 677 and this line 677
   remark #15346: vector dependence: assumed OUTPUT dependence between this line 677 and this line 677

   LOOP BEGIN at Matrix.C(670,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this line 677 and this line 677
      remark #15346: vector dependence: assumed OUTPUT dependence between this line 677 and this line 677

      LOOP BEGIN at Matrix.C(672,32)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at Matrix.C(674,34)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(689,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Matrix.C(691,34)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at Matrix.C(713,15)
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15459: masked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 107 
         remark #15477: vector loop cost: 66.750 
         remark #15478: estimated potential speedup: 1.600 
         remark #15479: lightweight vector operations: 13 
         remark #15481: heavy-overhead vector operations: 3 
         remark #15482: vectorized math library calls: 2 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at Matrix.C(713,15)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::getsub(ComplexMatrix *, const ComplexMatrix &, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(977,3)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(979,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a line 978 and this line 979
   remark #15346: vector dependence: assumed FLOW dependence between this line 979 and a line 978

   LOOP BEGIN at Matrix.C(978,5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(978,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(978,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::getsub(ComplexMatrix *, const ComplexMatrix &, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1003,3)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ Matrix.C(1005,37) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a line 1004 and this line 1005
   remark #15346: vector dependence: assumed FLOW dependence between this line 1005 and a line 1004

   LOOP BEGIN at Matrix.C(1004,5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at Matrix.C(1004,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at Matrix.C(1004,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::transpose(ComplexMatrix *, std::complex<double>, const ComplexMatrix &, std::complex<double>)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1074,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160

   LOOP BEGIN at Matrix.C(1075,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1080,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_7821 line 160 and this_7821 line 160
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::transpose(ComplexMatrix *, const ComplexMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(1074,5) inlined into Matrix.C(1093,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160

   LOOP BEGIN at Matrix.C(1075,7) inlined into Matrix.C(1093,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
      remark #15346: vector dependence: assumed OUTPUT dependence between this_7821 line 160 and this_7821 line 160
   LOOP END
LOOP END

LOOP BEGIN at Matrix.C(1080,5) inlined into Matrix.C(1093,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_7821 line 160 and this_7821 line 160
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::heev(ComplexMatrix *, char, std::valarray<double> &, ComplexMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2618,54)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.C(2618,54)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1295,5) inlined into Matrix.C(2620,6)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::heev(ComplexMatrix *, char, std::valarray<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2767,54)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.C(2767,54)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::heevd(ComplexMatrix *, char, std::valarray<double> &, ComplexMatrix &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2700,54)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.C(2700,54)
<Remainder>
LOOP END

LOOP BEGIN at Matrix.C(1295,5) inlined into Matrix.C(2702,6)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::heevd(ComplexMatrix *, char, std::valarray<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2853,54)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15387: vectorization support: scalar type occupies entire vector
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 12.000 
   remark #15478: estimated potential speedup: 3.620 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.C(2853,54)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ComplexMatrix::init_size(ComplexMatrix *, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(499,3)
   remark #15389: vectorization support: reference this has unaligned access
   remark #15389: vectorization support: reference this has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15301: BLOCK WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 1.710 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::trace(const DoubleMatrix *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2231,3)
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 28.000 
   remark #15478: estimated potential speedup: 2.130 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at Matrix.C(2231,3)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at Matrix.C(2231,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::init(DoubleMatrix *, const double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(744,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Matrix.C(746,7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at Matrix.C(748,30)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at Matrix.C(750,32)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::initdiag(DoubleMatrix *, const double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(2181,30)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at Matrix.C(2183,32)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

      LOOP BEGIN at Matrix.C(2205,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between this line 2211 and this line 2211
         remark #15346: vector dependence: assumed FLOW dependence between this line 2211 and this line 2211
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DoubleMatrix::init_size(DoubleMatrix *, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Matrix.C(429,3)
   remark #15389: vectorization support: reference this has unaligned access
   remark #15389: vectorization support: reference this has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15301: BLOCK WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 1.710 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================
